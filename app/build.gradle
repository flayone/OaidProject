apply plugin: 'com.android.application'


def version = "1.1.0"

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.lyy.oaidproject"
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 2
        versionName version

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug{
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}


//APK重命名
println "********** apk outputs **********"
android.applicationVariants.all { variant ->
    def versionName = version
    def versionCode = 1
    variant.outputs.all {
//        if (variant.buildType.name == 'debug') {
//            //debug版本不重定义输出目录，也不重命名
//            return
//        }
        if (outputFileName != null && outputFileName.endsWith(".apk")) {
            // 命名格式“app_[版本号]_[其他信息].apk”
            String fileName = "oaidprj_${versionName}_${outputFile.name.replace('app-', '').replace('.apk', '')}.apk"
            //这里只能用相对路径，不然报错
            outputFileName = new File(fileName)
            println "outputFile=$outputFile"
        }
    }
    //APK构建完成后，备份release版本及其混淆信息到指定目录
    tasks.all { it ->
        def maybeNeedCopy = false
        if (it.name.startsWith("assemble") && it.name.endsWith("Release")) {
            maybeNeedCopy = true
        }
        if (maybeNeedCopy) {
            it.doLast {
                variant.outputs.each { output ->
                    def isRelease = variant.buildType.name == 'release'
                    File outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk') && isRelease) {
                        File targetDir = rootProject.file("归档/v${versionName}-${versionCode}")
                        targetDir.mkdirs()
                        copy {
                            from outputFile
                            into targetDir
                        }
                        copy {
                            from rootProject.file("app/proguard")
                            into targetDir
                        }
                    }
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'


    //OAID gradle 引入，推荐使用此方式：源代码方式获取，大小65k
//    implementation 'com.github.flayone.OaidProject:myOaid:1.0.4'

    //msa SDK方式获取，大小1.0M
    implementation 'io.github.flayone:oaid-sdk:1.0.25'

    implementation project(path: ':myOaid')
}